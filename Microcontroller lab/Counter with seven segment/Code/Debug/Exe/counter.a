;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 06/03/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8/000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;//unsigned char table[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
;//unsigned char table[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
;
;
;int count = 0;
;
;
;
;int i , j ,k;
;
; void updateIndexes(int num){
; 0000 0025 void updateIndexes(int num){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026     if (count >100){
;PCODE: $0000000F VOL: 0
;	num -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0027     int num2 = num/10;
; 0000 0028 
; 0000 0029 
; 0000 002A     k = num%10;
;PCODE: $00000013 VOL: 0
;	num -> Y+2
;	num2 -> Y+0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002B 
; 0000 002C 
; 0000 002D     j =  (num2%10);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002E     i = num2/10;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002F 
; 0000 0030     }
;PCODE: $00000024 VOL: 0
; 0000 0031 
; 0000 0032     else{
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0033     i = num/10;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0034     j =  num%10;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0035     k=0;
;PCODE: $0000002F VOL: 0
; 0000 0036 
; 0000 0037     }
;PCODE: $00000030 VOL: 0
; 0000 0038 
; 0000 0039 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void main(void)
; 0000 003C {
;PCODE: $00000034 VOL: 0
; 0000 003D 
; 0000 003E 
; 0000 003F 
; 0000 0040 
; 0000 0041 
; 0000 0042 
; 0000 0043 // Declare your local variables here
; 0000 0044 
; 0000 0045 // Input/Output Ports initialization
; 0000 0046 // Port A initialization
; 0000 0047 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0048 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0049 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 004A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004B 
; 0000 004C // Port B initialization
; 0000 004D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 004E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0050 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0051 
; 0000 0052 // Port C initialization
; 0000 0053 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0054 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0055 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0056 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0057 
; 0000 0058 // Port D initialization
; 0000 0059 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 005A DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 005C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005D 
; 0000 005E // Timer/Counter 0 initialization
; 0000 005F // Clock source: System Clock
; 0000 0060 // Clock value: Timer 0 Stopped
; 0000 0061 // Mode: Normal top=0xFF
; 0000 0062 // OC0 output: Disconnected
; 0000 0063 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0064 TCNT0=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0065 OCR0=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0066 
; 0000 0067 // Timer/Counter 1 initialization
; 0000 0068 // Clock source: System Clock
; 0000 0069 // Clock value: Timer1 Stopped
; 0000 006A // Mode: Normal top=0xFFFF
; 0000 006B // OC1A output: Disconnected
; 0000 006C // OC1B output: Disconnected
; 0000 006D // Noise Canceler: Off
; 0000 006E // Input Capture on Falling Edge
; 0000 006F // Timer1 Overflow Interrupt: Off
; 0000 0070 // Input Capture Interrupt: Off
; 0000 0071 // Compare A Match Interrupt: Off
; 0000 0072 // Compare B Match Interrupt: Off
; 0000 0073 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0074 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0075 TCNT1H=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0076 TCNT1L=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0077 ICR1H=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0078 ICR1L=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0079 OCR1AH=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 007A OCR1AL=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007B OCR1BH=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 007C OCR1BL=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 007D 
; 0000 007E // Timer/Counter 2 initialization
; 0000 007F // Clock source: System Clock
; 0000 0080 // Clock value: Timer2 Stopped
; 0000 0081 // Mode: Normal top=0xFF
; 0000 0082 // OC2 output: Disconnected
; 0000 0083 ASSR=0<<AS2;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0084 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0085 TCNT2=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0086 OCR2=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0087 
; 0000 0088 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0089 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008A 
; 0000 008B // External Interrupt(s) initialization
; 0000 008C // INT0: Off
; 0000 008D // INT1: Off
; 0000 008E // INT2: Off
; 0000 008F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0090 MCUCSR=(0<<ISC2);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0091 
; 0000 0092 // USART initialization
; 0000 0093 // USART disabled
; 0000 0094 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0095 
; 0000 0096 // Analog Comparator initialization
; 0000 0097 // Analog Comparator: Off
; 0000 0098 // The Analog Comparator's positive input is
; 0000 0099 // connected to the AIN0 pin
; 0000 009A // The Analog Comparator's negative input is
; 0000 009B // connected to the AIN1 pin
; 0000 009C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009D SFIOR=(0<<ACME);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009E 
; 0000 009F // ADC initialization
; 0000 00A0 // ADC disabled
; 0000 00A1 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00A2 
; 0000 00A3 // SPI initialization
; 0000 00A4 // SPI disabled
; 0000 00A5 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A6 
; 0000 00A7 // TWI initialization
; 0000 00A8 // TWI disabled
; 0000 00A9 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00AA 
; 0000 00AB 
; 0000 00AC 
; 0000 00AD // PD 4 to 7 are com of 7SEG
; 0000 00AE while (1)
;PCODE: $00000079 VOL: 0
; 0000 00AF       {
; 0000 00B0 
; 0000 00B1       int d = 5;
; 0000 00B2 
; 0000 00B3       PORTD.3=1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	d -> Y+0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B4 
; 0000 00B5 
; 0000 00B6 
; 0000 00B7       if(count>255){
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B8         count =0;
;PCODE: $00000084 VOL: 0
; 0000 00B9       }
; 0000 00BA 
; 0000 00BB 
; 0000 00BC 
; 0000 00BD 
; 0000 00BE 
; 0000 00BF       if (count <=9 ){
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00C0 
; 0000 00C1          PORTD.0=0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C2          PORTD.1=1;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C3          PORTD.2=1;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00C4 
; 0000 00C5 
; 0000 00C6 
; 0000 00C7         PORTC = count ;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00C8 
; 0000 00C9          delay_ms(d) ;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00CA 
; 0000 00CB 
; 0000 00CC 
; 0000 00CD       }else  {
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00CE           updateIndexes(count);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00CF 
; 0000 00D0 
; 0000 00D1 
; 0000 00D2 
; 0000 00D3           PORTD.0=0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00D4           PORTD.1=1;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00D5           PORTD.2 =1;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D6 
; 0000 00D7           PORTC = i ;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D8 
; 0000 00D9           delay_ms(d);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00DA 
; 0000 00DB           PORTD.0=1;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00DC           PORTD.1=1;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00DD           PORTD.2 =1;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00DE 
; 0000 00DF           PORTD.0=1;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00E0           PORTD.1=0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00E1           PORTD.2 =1;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E2 
; 0000 00E3           PORTC = j;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00E4 
; 0000 00E5           delay_ms(d);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00E6 
; 0000 00E7           PORTD.0=1;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E8           PORTD.1=1;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00E9           PORTD.2 =1;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00EA 
; 0000 00EB           if (count >100){
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00EC           PORTD.0=1;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00ED           PORTD.1=1;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00EE           PORTD.2 =0;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00EF 
; 0000 00F0 
; 0000 00F1           PORTC = k;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00F2 
; 0000 00F3           delay_ms(d);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F4 
; 0000 00F5           PORTD.0=1;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00F6           PORTD.1=1;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00F7           PORTD.2 =1;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F8 
; 0000 00F9           }
; 0000 00FA 
; 0000 00FB       }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00FC 
; 0000 00FD       delay_ms(d) ;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00FE 
; 0000 00FF         count+=1;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0100 
; 0000 0101       }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0102 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
