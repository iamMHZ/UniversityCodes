;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 07/04/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8/000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;
;float sevenSegDelay = 1;

	.DSEG
;int numbers[4] = {0,0,0,0};
;int index = 0;
;float keypadDelay = 0.5;
;
;
;void deactivateAllComs(){
; 0000 0022 void deactivateAllComs(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023 
; 0000 0024           PORTD.0=1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0025           PORTD.1=1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0026           PORTD.2 =1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0027           PORTD.3 = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0028 
; 0000 0029 }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;
;void updateSevenSegment(){
; 0000 002C void updateSevenSegment(){
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002D 
; 0000 002E  // activate com of target 7segment
; 0000 002F           PORTD.0=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0030           PORTD.1=1;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0031           PORTD.2 =1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032           PORTD.3 = 1;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0033           // put the number on portC
; 0000 0034           PORTC = numbers[0] ;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0035 
; 0000 0036           delay_ms(sevenSegDelay);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0037 
; 0000 0038          deactivateAllComs();
;PCODE: $00000029 VOL: 0
; 0000 0039 
; 0000 003A           PORTD.0=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003B           PORTD.1=0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003C           PORTD.2 =1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003D           PORTD.3 = 1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003E 
; 0000 003F           PORTC = numbers[1];
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0040 
; 0000 0041           delay_ms(sevenSegDelay);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0042 
; 0000 0043         deactivateAllComs();
;PCODE: $00000039 VOL: 0
; 0000 0044 
; 0000 0045 
; 0000 0046           PORTD.0=1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0047           PORTD.1=1;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0048           PORTD.2 =0;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0049           PORTD.3 = 1;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004A 
; 0000 004B 
; 0000 004C           PORTC = numbers[2];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004D 
; 0000 004E           delay_ms(sevenSegDelay);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004F 
; 0000 0050          deactivateAllComs();
;PCODE: $00000049 VOL: 0
; 0000 0051 
; 0000 0052           PORTD.0=1;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0053           PORTD.1=1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0054           PORTD.2 =1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0055           PORTD.3 = 0;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0056 
; 0000 0057 
; 0000 0058           PORTC = numbers[3];
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0059 
; 0000 005A           delay_ms(sevenSegDelay);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005B 
; 0000 005C           deactivateAllComs();
;PCODE: $00000059 VOL: 0
; 0000 005D 
; 0000 005E }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;
;void updateIndex(){
; 0000 0061 void updateIndex(){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0062 
; 0000 0063     index +=1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0064 
; 0000 0065     if(index >3){
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0066      index = 0;
;PCODE: $00000064 VOL: 0
; 0000 0067     }
; 0000 0068 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;void checkKeypad(){
; 0000 006A void checkKeypad(){
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 006B 
; 0000 006C     // SECOND ROW
; 0000 006D       PORTB.3 = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006E       PORTB.4 = 1;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 006F       PORTB.5 = 1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0070       PORTB.6 = 1;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0071 
; 0000 0072 
; 0000 0073       delay_ms(keypadDelay) ;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0074 
; 0000 0075       if (PINB.0 == 0){
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0076 
; 0000 0077         numbers[index] = 1;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0078         updateIndex();
;PCODE: $0000007F VOL: 0
; 0000 0079 
; 0000 007A         // avoid multiple clicking
; 0000 007B         while(PINB.0==0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 007C       }
; 0000 007D 
; 0000 007E        else if (PINB.1 == 0){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007F 
; 0000 0080        numbers[index] = 2;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0081         updateIndex();
;PCODE: $00000091 VOL: 0
; 0000 0082 
; 0000 0083         while(PINB.1==0);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0084       }
; 0000 0085 
; 0000 0086       else if (PINB.2 == 0){
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0087 
; 0000 0088         numbers[index] = 3;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0089         updateIndex();
;PCODE: $000000A3 VOL: 0
; 0000 008A 
; 0000 008B 
; 0000 008C         while(PINB.2==0);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008D 
; 0000 008E       }
; 0000 008F 
; 0000 0090 
; 0000 0091 
; 0000 0092 
; 0000 0093       // second row
; 0000 0094       PORTB.3 = 1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0095       PORTB.4 = 0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0096       PORTB.5 = 1;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0097       PORTB.6 = 1;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0098 
; 0000 0099 
; 0000 009A       delay_ms(keypadDelay) ;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 009B 
; 0000 009C       if (PINB.0 == 0){
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 009D 
; 0000 009E         numbers[index] = 4;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009F         updateIndex();
;PCODE: $000000C2 VOL: 0
; 0000 00A0 
; 0000 00A1        while(PINB.0==0);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00A2       }
; 0000 00A3 
; 0000 00A4        else if (PINB.1 == 0){
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A5 
; 0000 00A6        numbers[index] = 5;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00A7         updateIndex();
;PCODE: $000000D4 VOL: 0
; 0000 00A8 
; 0000 00A9          while(PINB.1==0);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00AA       }
; 0000 00AB 
; 0000 00AC       else if (PINB.2 == 0){
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00AD 
; 0000 00AE         numbers[index] = 6;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00AF         updateIndex();
;PCODE: $000000E6 VOL: 0
; 0000 00B0 
; 0000 00B1         while(PINB.2==0);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B2       }
; 0000 00B3 
; 0000 00B4 
; 0000 00B5 
; 0000 00B6        // third row
; 0000 00B7 
; 0000 00B8       PORTB.3 = 1;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00B9       PORTB.4 = 1;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00BA       PORTB.5 = 0;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00BB       PORTB.6 = 1;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00BC 
; 0000 00BD 
; 0000 00BE       delay_ms(keypadDelay) ;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00BF 
; 0000 00C0       if (PINB.0 == 0){
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00C1 
; 0000 00C2         numbers[index] = 7;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00C3         updateIndex();
;PCODE: $00000105 VOL: 0
; 0000 00C4 
; 0000 00C5 
; 0000 00C6       while(PINB.0==0);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C7       }
; 0000 00C8 
; 0000 00C9        else if (PINB.1 == 0){
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00CA 
; 0000 00CB        numbers[index] = 8;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00CC         updateIndex();
;PCODE: $00000117 VOL: 0
; 0000 00CD 
; 0000 00CE          while(PINB.1==0);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00CF       }
; 0000 00D0 
; 0000 00D1       else if (PINB.2 == 0){
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00D2 
; 0000 00D3         numbers[index] = 9;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00D4         updateIndex();
;PCODE: $00000129 VOL: 0
; 0000 00D5 
; 0000 00D6 
; 0000 00D7         while(PINB.2==0);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00D8       }
; 0000 00D9 
; 0000 00DA 
; 0000 00DB 
; 0000 00DC       // in the last row just look for pressing 0
; 0000 00DD 
; 0000 00DE       PORTB.3 = 1;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00DF       PORTB.4 = 1;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00E0       PORTB.5 = 1;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00E1       PORTB.6 = 0;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00E2 
; 0000 00E3 
; 0000 00E4       delay_ms(keypadDelay) ;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00E5 
; 0000 00E6       if (PINB.1 == 0){
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00E7 
; 0000 00E8         numbers[index] = 0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00E9         updateIndex();
;PCODE: $00000148 VOL: 0
; 0000 00EA 
; 0000 00EB          while(PINB.1==0);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00EC       }
; 0000 00ED 
; 0000 00EE }
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;
;void main(void)
; 0000 00F1 {
;PCODE: $00000152 VOL: 0
; 0000 00F2 // Declare your local variables here
; 0000 00F3 
; 0000 00F4 // Input/Output Ports initialization
; 0000 00F5 // Port A initialization
; 0000 00F6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00F7 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00F8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00F9 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00FA 
; 0000 00FB // Port B initialization
; 0000 00FC // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 00FD DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00FE // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 00FF PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0100 
; 0000 0101 // Port C initialization
; 0000 0102 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0103 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0104 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0105 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0106 
; 0000 0107 // Port D initialization
; 0000 0108 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0109 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 010A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 010B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 010C 
; 0000 010D // Timer/Counter 0 initialization
; 0000 010E // Clock source: System Clock
; 0000 010F // Clock value: Timer 0 Stopped
; 0000 0110 // Mode: Normal top=0xFF
; 0000 0111 // OC0 output: Disconnected
; 0000 0112 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0113 TCNT0=0x00;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0114 OCR0=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0115 
; 0000 0116 // Timer/Counter 1 initialization
; 0000 0117 // Clock source: System Clock
; 0000 0118 // Clock value: Timer1 Stopped
; 0000 0119 // Mode: Normal top=0xFFFF
; 0000 011A // OC1A output: Disconnected
; 0000 011B // OC1B output: Disconnected
; 0000 011C // Noise Canceler: Off
; 0000 011D // Input Capture on Falling Edge
; 0000 011E // Timer1 Overflow Interrupt: Off
; 0000 011F // Input Capture Interrupt: Off
; 0000 0120 // Compare A Match Interrupt: Off
; 0000 0121 // Compare B Match Interrupt: Off
; 0000 0122 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0123 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0124 TCNT1H=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0125 TCNT1L=0x00;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0126 ICR1H=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0127 ICR1L=0x00;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0128 OCR1AH=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0129 OCR1AL=0x00;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 012A OCR1BH=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 012B OCR1BL=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 012C 
; 0000 012D // Timer/Counter 2 initialization
; 0000 012E // Clock source: System Clock
; 0000 012F // Clock value: Timer2 Stopped
; 0000 0130 // Mode: Normal top=0xFF
; 0000 0131 // OC2 output: Disconnected
; 0000 0132 ASSR=0<<AS2;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0133 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0134 TCNT2=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0135 OCR2=0x00;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0136 
; 0000 0137 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0138 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0139 
; 0000 013A // External Interrupt(s) initialization
; 0000 013B // INT0: Off
; 0000 013C // INT1: Off
; 0000 013D // INT2: Off
; 0000 013E MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 013F MCUCSR=(0<<ISC2);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0140 
; 0000 0141 // USART initialization
; 0000 0142 // USART disabled
; 0000 0143 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0144 
; 0000 0145 // Analog Comparator initialization
; 0000 0146 // Analog Comparator: Off
; 0000 0147 // The Analog Comparator's positive input is
; 0000 0148 // connected to the AIN0 pin
; 0000 0149 // The Analog Comparator's negative input is
; 0000 014A // connected to the AIN1 pin
; 0000 014B ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 014C SFIOR=(0<<ACME);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 014D 
; 0000 014E // ADC initialization
; 0000 014F // ADC disabled
; 0000 0150 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0151 
; 0000 0152 // SPI initialization
; 0000 0153 // SPI disabled
; 0000 0154 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0155 
; 0000 0156 // TWI initialization
; 0000 0157 // TWI disabled
; 0000 0158 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0159 
; 0000 015A 
; 0000 015B       PORTB.0=1;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 015C       PORTB.1=1;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 015D       PORTB.2=1;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 015E 
; 0000 015F 
; 0000 0160 
; 0000 0161 
; 0000 0162 while (1)
;PCODE: $0000019D VOL: 0
; 0000 0163       {
; 0000 0164 
; 0000 0165       updateSevenSegment();
;PCODE: $0000019E VOL: 0
; 0000 0166 
; 0000 0167       checkKeypad();
;PCODE: $0000019F VOL: 0
; 0000 0168 
; 0000 0169 
; 0000 016A       }
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 016B }
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
